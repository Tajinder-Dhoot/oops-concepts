Object
A Java object is a member (also called an instance) of a Java class. Each object has an identity, a behavior and a state. 
The state of an object is stored in fields (variables), while methods (functions) display the object's behavior

Class
A class is a user defined blueprint or prototype from which objects are created.
It represents the set of properties or methods that are common to all objects of one type

Inheritance
When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.

Polymorphism
If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc. 
In Java, we use method overloading and method overriding to achieve polymorphism.
Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.

Abstraction
Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing.
In Java, we use abstract class and interface to achieve abstraction.

Encapsulation
Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example, a capsule, it is wrapped with different medicines.
A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.

Coupling
Dependency of a classes on another classes

*************Low coupling > less dependency > changes in one class has less effects on another classes > maintenance is easier*********************

If a class has the details information of another class, there is strong coupling. In Java, we use private, protected, and
public modifiers to display the visibility level of a class, method, and field. 
You can use interfaces for the weaker coupling because there is no concrete implementation.

Cohesion
Measure of how related everything in a class is to the purpose of the class.

*******************High cohesion > well defined focus > easier to understand & test the code******************

Cohesion refers to the level of a component which performs a single well-defined task. A single well-defined task is done by a highly cohesive method. The weakly cohesive method will split the task into separate parts. The java.io package is a highly cohesive package because it has I/O related classes and interface. However, the java.util package is a weakly cohesive package because it has unrelated classes and interfaces.

Association
Association represents the relationship between the objects. Here, one object can be associated with one object or many objects. 
There can be four types of association between the objects:
One to One
One to Many
Many to One, and
Many to Many
Let's understand the relationship with real-time examples. 
For example, One country can have one prime minister (one to one), and a prime minister can have many ministers (one to many). 
Also, many MP's can have one prime minister (many to one), and many ministers can have many departments (many to many).
Association can be undirectional or bidirectional.

Relationships
Collaboration ('uses a') : A class has another class that is otherwise unrelated.
Composition/ Aggregation ('has a'): A class is made up of parts from other classes.
    The composition is also a way to achieve Association. The composition represents the relationship where one object contains other objects as a part of its state. 
    There is a strong relationship between the containing object and the dependent object. It is the state where containing objects do not have an independent existence. 
    If you delete the parent object, all the child objects will be deleted automatically.
Inheritance ('is a')
